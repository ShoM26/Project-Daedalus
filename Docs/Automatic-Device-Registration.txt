System overview:
The data pipeline is Arduino -> C# script -> C# API -> MySQL.
The goal is to let a new Arduino device register itself automatically with the backend the first time it connects, using a user-linked registration token, without depending on an active frontend session.

Communication model:

Arduino connects to the C# script over serial (USB) or Bluetooth serial.

The script currently reads only from the device, but future versions may also write to it (needed to transmit registration tokens).

All downstream traffic (from script -> API -> DB) is HTTPS POST calls.

Registration token:

Each user has a JWT-style registration key.

This token encodes the user_id and is reusable for multiple device registrations.

It should be stored in the users table of the MySQL database (for example, a column named registration_token).

The token can be revoked or rotated if compromised.

Security remains a high-priority consideration in token handling and storage.

Registration flow:

User logs in via the frontend.

The backend issues or retrieves the userâ€™s JWT registration key.

The frontend or backend passes that key to the C# script.

The C# script sends the registration key to the Arduino over the serial connection (once writing is implemented).

The Arduino stores the key in EEPROM for persistence.

The Arduino transmits readings periodically, always including:
{
"device_id": "<unique_hw_id>",
"registration_key": "<JWT>",
"sensor_data": {...}
}

The API receives the message, verifies the JWT, extracts the user_id, and:

If device_id does not exist, the backend auto-creates a new device entry assigned to that user.

If it already exists, it updates readings normally.

After first registration, the Arduino omits the registration key in future transmissions (only sends device_id and data).

Notes and next steps:

Implement serial/Bluetooth write capability in the C# script so it can deliver the JWT to the Arduino.

Ensure API validation for token authenticity, expiration, and replay protection.

Keep the system flexible for later support of:

Token rotation or invalidation

Optional device verification UI in the frontend

Expanded device metadata